// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Authenticate with the admin server.
	// (POST /client/auth)
	Authenticate(ctx echo.Context) error
	// Get all feature flags activations
	// (GET /client/env/{environmentUUID}/feature-configs)
	GetFeatureConfig(ctx echo.Context, environmentUUID string) error
	// Get feature config
	// (GET /client/env/{environmentUUID}/feature-configs/{identifier})
	GetFeatureConfigByIdentifier(ctx echo.Context, environmentUUID string, identifier string) error
	// Retrieve all segments.
	// (GET /client/env/{environmentUUID}/target-segments)
	GetAllSegments(ctx echo.Context, environmentUUID string) error
	// Retrieve a segment by identifier
	// (GET /client/env/{environmentUUID}/target-segments/{identifier})
	GetSegmentByIdentifier(ctx echo.Context, environmentUUID string, identifier string) error
	// Get feature evaluations for target
	// (GET /client/env/{environmentUUID}/target/{target}/evaluations)
	GetEvaluations(ctx echo.Context, environmentUUID string, target string) error
	// Get feature evaluations for target
	// (GET /client/env/{environmentUUID}/target/{target}/evaluations/{feature})
	GetEvaluationByIdentifier(ctx echo.Context, environmentUUID string, target string, feature string) error
	// Send metrics to the Analytics server.
	// (POST /metrics/{environment})
	PostMetrics(ctx echo.Context, environment EnvironmentPathParam) error
	// Stream endpoint.
	// (GET /stream)
	Stream(ctx echo.Context, params StreamParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Authenticate converts echo context to params.
func (w *ServerInterfaceWrapper) Authenticate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Authenticate(ctx)
	return err
}

// GetFeatureConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetFeatureConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "environmentUUID" -------------
	var environmentUUID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "environmentUUID", runtime.ParamLocationPath, ctx.Param("environmentUUID"), &environmentUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFeatureConfig(ctx, environmentUUID)
	return err
}

// GetFeatureConfigByIdentifier converts echo context to params.
func (w *ServerInterfaceWrapper) GetFeatureConfigByIdentifier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "environmentUUID" -------------
	var environmentUUID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "environmentUUID", runtime.ParamLocationPath, ctx.Param("environmentUUID"), &environmentUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentUUID: %s", err))
	}

	// ------------- Path parameter "identifier" -------------
	var identifier string

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFeatureConfigByIdentifier(ctx, environmentUUID, identifier)
	return err
}

// GetAllSegments converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllSegments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "environmentUUID" -------------
	var environmentUUID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "environmentUUID", runtime.ParamLocationPath, ctx.Param("environmentUUID"), &environmentUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAllSegments(ctx, environmentUUID)
	return err
}

// GetSegmentByIdentifier converts echo context to params.
func (w *ServerInterfaceWrapper) GetSegmentByIdentifier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "environmentUUID" -------------
	var environmentUUID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "environmentUUID", runtime.ParamLocationPath, ctx.Param("environmentUUID"), &environmentUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentUUID: %s", err))
	}

	// ------------- Path parameter "identifier" -------------
	var identifier string

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSegmentByIdentifier(ctx, environmentUUID, identifier)
	return err
}

// GetEvaluations converts echo context to params.
func (w *ServerInterfaceWrapper) GetEvaluations(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "environmentUUID" -------------
	var environmentUUID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "environmentUUID", runtime.ParamLocationPath, ctx.Param("environmentUUID"), &environmentUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentUUID: %s", err))
	}

	// ------------- Path parameter "target" -------------
	var target string

	err = runtime.BindStyledParameterWithLocation("simple", false, "target", runtime.ParamLocationPath, ctx.Param("target"), &target)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter target: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEvaluations(ctx, environmentUUID, target)
	return err
}

// GetEvaluationByIdentifier converts echo context to params.
func (w *ServerInterfaceWrapper) GetEvaluationByIdentifier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "environmentUUID" -------------
	var environmentUUID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "environmentUUID", runtime.ParamLocationPath, ctx.Param("environmentUUID"), &environmentUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentUUID: %s", err))
	}

	// ------------- Path parameter "target" -------------
	var target string

	err = runtime.BindStyledParameterWithLocation("simple", false, "target", runtime.ParamLocationPath, ctx.Param("target"), &target)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter target: %s", err))
	}

	// ------------- Path parameter "feature" -------------
	var feature string

	err = runtime.BindStyledParameterWithLocation("simple", false, "feature", runtime.ParamLocationPath, ctx.Param("feature"), &feature)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter feature: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEvaluationByIdentifier(ctx, environmentUUID, target, feature)
	return err
}

// PostMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) PostMetrics(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "environment" -------------
	var environment EnvironmentPathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "environment", runtime.ParamLocationPath, ctx.Param("environment"), &environment)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environment: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostMetrics(ctx, environment)
	return err
}

// Stream converts echo context to params.
func (w *ServerInterfaceWrapper) Stream(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StreamParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "API-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("API-Key")]; found {
		var APIKey string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for API-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "API-Key", runtime.ParamLocationHeader, valueList[0], &APIKey)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter API-Key: %s", err))
		}

		params.APIKey = APIKey
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter API-Key is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Stream(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/client/auth", wrapper.Authenticate)
	router.GET(baseURL+"/client/env/:environmentUUID/feature-configs", wrapper.GetFeatureConfig)
	router.GET(baseURL+"/client/env/:environmentUUID/feature-configs/:identifier", wrapper.GetFeatureConfigByIdentifier)
	router.GET(baseURL+"/client/env/:environmentUUID/target-segments", wrapper.GetAllSegments)
	router.GET(baseURL+"/client/env/:environmentUUID/target-segments/:identifier", wrapper.GetSegmentByIdentifier)
	router.GET(baseURL+"/client/env/:environmentUUID/target/:target/evaluations", wrapper.GetEvaluations)
	router.GET(baseURL+"/client/env/:environmentUUID/target/:target/evaluations/:feature", wrapper.GetEvaluationByIdentifier)
	router.POST(baseURL+"/metrics/:environment", wrapper.PostMetrics)
	router.GET(baseURL+"/stream", wrapper.Stream)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"BLdlJcM+cQG1vdv+LwAA//82P70JEDYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
