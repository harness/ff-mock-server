// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Authenticate with the admin server.
	// (POST /client/auth)
	Authenticate(ctx echo.Context) error
	// Get all feature flags activations
	// (GET /client/env/{environmentUUID}/feature-configs)
	GetFeatureConfig(ctx echo.Context, environmentUUID string) error
	// Get feature config
	// (GET /client/env/{environmentUUID}/feature-configs/{identifier})
	GetFeatureConfigByIdentifier(ctx echo.Context, environmentUUID string, identifier string) error
	// Retrieve all segments.
	// (GET /client/env/{environmentUUID}/target-segments)
	GetAllSegments(ctx echo.Context, environmentUUID string) error
	// Retrieve a segment by identifier
	// (GET /client/env/{environmentUUID}/target-segments/{identifier})
	GetSegmentByIdentifier(ctx echo.Context, environmentUUID string, identifier string) error
	// Get feature evaluations for target
	// (GET /client/env/{environmentUUID}/target/{target}/evaluations)
	GetEvaluations(ctx echo.Context, environmentUUID string, target string) error
	// Get feature evaluations for target
	// (GET /client/env/{environmentUUID}/target/{target}/evaluations/{feature})
	GetEvaluationByIdentifier(ctx echo.Context, environmentUUID string, target string, feature string) error
	// Stream endpoint.
	// (GET /stream)
	Stream(ctx echo.Context, params StreamParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Authenticate converts echo context to params.
func (w *ServerInterfaceWrapper) Authenticate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Authenticate(ctx)
	return err
}

// GetFeatureConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetFeatureConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "environmentUUID" -------------
	var environmentUUID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "environmentUUID", runtime.ParamLocationPath, ctx.Param("environmentUUID"), &environmentUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFeatureConfig(ctx, environmentUUID)
	return err
}

// GetFeatureConfigByIdentifier converts echo context to params.
func (w *ServerInterfaceWrapper) GetFeatureConfigByIdentifier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "environmentUUID" -------------
	var environmentUUID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "environmentUUID", runtime.ParamLocationPath, ctx.Param("environmentUUID"), &environmentUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentUUID: %s", err))
	}

	// ------------- Path parameter "identifier" -------------
	var identifier string

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFeatureConfigByIdentifier(ctx, environmentUUID, identifier)
	return err
}

// GetAllSegments converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllSegments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "environmentUUID" -------------
	var environmentUUID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "environmentUUID", runtime.ParamLocationPath, ctx.Param("environmentUUID"), &environmentUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAllSegments(ctx, environmentUUID)
	return err
}

// GetSegmentByIdentifier converts echo context to params.
func (w *ServerInterfaceWrapper) GetSegmentByIdentifier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "environmentUUID" -------------
	var environmentUUID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "environmentUUID", runtime.ParamLocationPath, ctx.Param("environmentUUID"), &environmentUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentUUID: %s", err))
	}

	// ------------- Path parameter "identifier" -------------
	var identifier string

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSegmentByIdentifier(ctx, environmentUUID, identifier)
	return err
}

// GetEvaluations converts echo context to params.
func (w *ServerInterfaceWrapper) GetEvaluations(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "environmentUUID" -------------
	var environmentUUID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "environmentUUID", runtime.ParamLocationPath, ctx.Param("environmentUUID"), &environmentUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentUUID: %s", err))
	}

	// ------------- Path parameter "target" -------------
	var target string

	err = runtime.BindStyledParameterWithLocation("simple", false, "target", runtime.ParamLocationPath, ctx.Param("target"), &target)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter target: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEvaluations(ctx, environmentUUID, target)
	return err
}

// GetEvaluationByIdentifier converts echo context to params.
func (w *ServerInterfaceWrapper) GetEvaluationByIdentifier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "environmentUUID" -------------
	var environmentUUID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "environmentUUID", runtime.ParamLocationPath, ctx.Param("environmentUUID"), &environmentUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentUUID: %s", err))
	}

	// ------------- Path parameter "target" -------------
	var target string

	err = runtime.BindStyledParameterWithLocation("simple", false, "target", runtime.ParamLocationPath, ctx.Param("target"), &target)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter target: %s", err))
	}

	// ------------- Path parameter "feature" -------------
	var feature string

	err = runtime.BindStyledParameterWithLocation("simple", false, "feature", runtime.ParamLocationPath, ctx.Param("feature"), &feature)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter feature: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEvaluationByIdentifier(ctx, environmentUUID, target, feature)
	return err
}

// Stream converts echo context to params.
func (w *ServerInterfaceWrapper) Stream(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StreamParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "API-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("API-Key")]; found {
		var APIKey string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for API-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "API-Key", runtime.ParamLocationHeader, valueList[0], &APIKey)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter API-Key: %s", err))
		}

		params.APIKey = APIKey
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter API-Key is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Stream(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/client/auth", wrapper.Authenticate)
	router.GET(baseURL+"/client/env/:environmentUUID/feature-configs", wrapper.GetFeatureConfig)
	router.GET(baseURL+"/client/env/:environmentUUID/feature-configs/:identifier", wrapper.GetFeatureConfigByIdentifier)
	router.GET(baseURL+"/client/env/:environmentUUID/target-segments", wrapper.GetAllSegments)
	router.GET(baseURL+"/client/env/:environmentUUID/target-segments/:identifier", wrapper.GetSegmentByIdentifier)
	router.GET(baseURL+"/client/env/:environmentUUID/target/:target/evaluations", wrapper.GetEvaluations)
	router.GET(baseURL+"/client/env/:environmentUUID/target/:target/evaluations/:feature", wrapper.GetEvaluationByIdentifier)
	router.GET(baseURL+"/stream", wrapper.Stream)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
